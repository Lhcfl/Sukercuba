/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/@[userhandle]': RouteRecordInfo<'/@[userhandle]', '/@:userhandle', { userhandle: ParamValue<true> }, { userhandle: ParamValue<false> }>,
    '/clips/': RouteRecordInfo<'/clips/', '/clips', Record<never, never>, Record<never, never>>,
    '/clips/[id]': RouteRecordInfo<'/clips/[id]', '/clips/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/favorites': RouteRecordInfo<'/favorites', '/favorites', Record<never, never>, Record<never, never>>,
    '/follow-requests': RouteRecordInfo<'/follow-requests', '/follow-requests', Record<never, never>, Record<never, never>>,
    '/login': RouteRecordInfo<'/login', '/login', Record<never, never>, Record<never, never>>,
    '/login-redirect': RouteRecordInfo<'/login-redirect', '/login-redirect', Record<never, never>, Record<never, never>>,
    '/notes/[id]': RouteRecordInfo<'/notes/[id]', '/notes/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/notifications': RouteRecordInfo<'/notifications', '/notifications', Record<never, never>, Record<never, never>>,
    '/search': RouteRecordInfo<'/search', '/search', Record<never, never>, Record<never, never>>,
    '/settings': RouteRecordInfo<'/settings', '/settings', Record<never, never>, Record<never, never>, '/settings/'>,
    '/settings/': RouteRecordInfo<'/settings/', '/settings', Record<never, never>, Record<never, never>>,
    '/tags/[tag]': RouteRecordInfo<'/tags/[tag]', '/tags/:tag', { tag: ParamValue<true> }, { tag: ParamValue<false> }>,
    '/test': RouteRecordInfo<'/test', '/test', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/index.vue': {
      routes: '/'
      views: never
    }
    'src/pages/@[userhandle].vue': {
      routes: '/@[userhandle]'
      views: never
    }
    'src/pages/clips/index.vue': {
      routes: '/clips/'
      views: never
    }
    'src/pages/clips/[id].vue': {
      routes: '/clips/[id]'
      views: never
    }
    'src/pages/favorites.vue': {
      routes: '/favorites'
      views: never
    }
    'src/pages/follow-requests.vue': {
      routes: '/follow-requests'
      views: never
    }
    'src/pages/login.vue': {
      routes: '/login'
      views: never
    }
    'src/pages/login-redirect.vue': {
      routes: '/login-redirect'
      views: never
    }
    'src/pages/notes/[id].vue': {
      routes: '/notes/[id]'
      views: never
    }
    'src/pages/notifications.vue': {
      routes: '/notifications'
      views: never
    }
    'src/pages/search.vue': {
      routes: '/search'
      views: never
    }
    'src/pages/settings.vue': {
      routes: '/settings' | '/settings/'
      views: 'default'
    }
    'src/pages/settings/index.vue': {
      routes: '/settings/'
      views: never
    }
    'src/pages/tags/[tag].vue': {
      routes: '/tags/[tag]'
      views: never
    }
    'src/pages/test.vue': {
      routes: '/test'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
